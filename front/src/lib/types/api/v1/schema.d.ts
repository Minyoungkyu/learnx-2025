/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/posts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 글 단건조회 */
        get: operations["getPost"];
        /** 글 편집 */
        put: operations["edit"];
        post?: never;
        /** 글 삭제 */
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{id}/mainVideo/{fileNo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 글의 비디오 업로드 */
        put: operations["uploadVideo"];
        post?: never;
        /** 글의 비디오 삭제 */
        delete: operations["deleteVideo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{id}/body": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 글(본문) 단건조회 */
        get: operations["getPostBody"];
        /** 글 본문 편집 */
        put: operations["editBody"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/postComments/{postId}/{postCommentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 댓글 수정 */
        put: operations["edit_1"];
        post?: never;
        /** 댓글 삭제 */
        delete: operations["delete_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/wikenMigrate/migrate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 마이그레이트 */
        post: operations["migrate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 글 추천 */
        post: operations["like"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/temp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 임시 글 생성 */
        post: operations["makeTemp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/postComments/{postId}/{postCommentId}/temp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 임시 답글 생성 */
        post: operations["makeTemp_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/postComments/{postId}/temp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 임시 댓글 생성 */
        post: operations["makeTemp_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그아웃 */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인, accessToken, refreshToken 쿠키 생성됨 */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 임시 글 생성 */
        get: operations["test"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 글 다건조회 */
        get: operations["getPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 글의 파일들 조회 */
        get: operations["getPostFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/mine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내글 다건조회 */
        get: operations["getMine"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/byAuthor/{authorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 특정 회원의글 다건조회 */
        get: operations["getByAuthor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/postComments/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 댓글 다건조회 */
        get: operations["getPostComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/postComments/{postId}/{postCommentId}/children": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 서브 댓글 다건조회 */
        get: operations["getPostSubComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 정보 */
        get: operations["getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{id}/cancelLike": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 글 추천취소 */
        delete: operations["cancelLike"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Empty: Record<string, never>;
        RsDataEmpty: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["Empty"];
        };
        EditRequestBody: {
            title: string;
            body: string;
            tagContents: string[];
            published: boolean;
            listed: boolean;
        };
        EditResponseBody: {
            item: components["schemas"]["PostWithBodyDto"];
        };
        PostWithBodyDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            createDate: string;
            /** Format: date-time */
            modifyDate: string;
            /** Format: int64 */
            authorId: number;
            authorName: string;
            authorProfileImgUrl: string;
            title: string;
            published: boolean;
            listed: boolean;
            /** Format: int64 */
            likesCount: number;
            /** Format: int64 */
            commentsCount: number;
            tagContents: string[];
            actorCanRead?: boolean;
            actorCanEdit?: boolean;
            actorCanDelete?: boolean;
            actorCanLike?: boolean;
            actorCanCancelLike?: boolean;
            body: string;
        };
        RsDataEditResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["EditResponseBody"];
        };
        EditBodyRequestBody: {
            body: string;
        };
        EditCommentRequestBody: {
            body: string;
        };
        EditCommentResponseBody: {
            item: components["schemas"]["PostCommentDto"];
        };
        PostCommentDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            createDate: string;
            /** Format: date-time */
            modifyDate: string;
            /** Format: int64 */
            authorId: number;
            authorName: string;
            authorProfileImgUrl: string;
            body: string;
            /** Format: int64 */
            childrenCount: number;
            /** Format: int64 */
            parentCommentId: number;
            actorCanEdit?: boolean;
            actorCanDelete?: boolean;
            actorCanReply?: boolean;
        };
        RsDataEditCommentResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["EditCommentResponseBody"];
        };
        MigrateRequestBody: {
            username?: string;
            password?: string;
        };
        LikeResponseBody: {
            item: components["schemas"]["PostDto"];
        };
        PostDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            createDate: string;
            /** Format: date-time */
            modifyDate: string;
            /** Format: int64 */
            authorId: number;
            authorName: string;
            authorProfileImgUrl: string;
            title: string;
            published: boolean;
            listed: boolean;
            /** Format: int64 */
            likesCount: number;
            /** Format: int64 */
            commentsCount: number;
            tagContents: string[];
            actorCanRead?: boolean;
            actorCanEdit?: boolean;
            actorCanDelete?: boolean;
            actorCanLike?: boolean;
            actorCanCancelLike?: boolean;
        };
        RsDataLikeResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["LikeResponseBody"];
        };
        MakeTempResponseBody: {
            item: components["schemas"]["PostDto"];
        };
        RsDataMakeTempResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["MakeTempResponseBody"];
        };
        MakeTempReplyCommentResponseBody: {
            item: components["schemas"]["PostCommentDto"];
        };
        RsDataMakeTempReplyCommentResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["MakeTempReplyCommentResponseBody"];
        };
        MakeTempCommentResponseBody: {
            item: components["schemas"]["PostCommentDto"];
        };
        RsDataMakeTempCommentResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["MakeTempCommentResponseBody"];
        };
        LoginRequestBody: {
            username: string;
            password: string;
        };
        LoginResponseBody: {
            item: components["schemas"]["MemberDto"];
        };
        MemberDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            createDate: string;
            /** Format: date-time */
            modifyDate: string;
            name: string;
            profileImgUrl: string;
            authorities: string[];
            social: boolean;
        };
        RsDataLoginResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["LoginResponseBody"];
        };
        RsDataTestResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["TestResponseBody"];
        };
        TestResponseBody: {
            /** Format: int64 */
            id: number;
        };
        GetPostsResponseBody: {
            itemPage: components["schemas"]["PageDtoPostDto"];
        };
        PageDtoPostDto: {
            /** Format: int64 */
            totalElementsCount: number;
            /** Format: int64 */
            pageElementsCount: number;
            /** Format: int64 */
            totalPagesCount: number;
            /** Format: int32 */
            number: number;
            content: components["schemas"]["PostDto"][];
        };
        RsDataGetPostsResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["GetPostsResponseBody"];
        };
        GetPostResponseBody: {
            item: components["schemas"]["PostWithBodyDto"];
        };
        RsDataGetPostResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["GetPostResponseBody"];
        };
        GenFileDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            createDate: string;
            /** Format: date-time */
            modifyDate: string;
            fileName: string;
            relTypeCode: string;
            /** Format: int64 */
            relId: number;
            typeCode: string;
            type2Code: string;
            fileExtTypeCode: string;
            fileExtType2Code: string;
            /** Format: int64 */
            fileSize: number;
            /** Format: int64 */
            fileNo: number;
            fileExt: string;
            fileDir: string;
            originFileName: string;
            url: string;
            downloadUrl: string;
        };
        GetPostFilesResponseBody: {
            items: components["schemas"]["GenFileDto"][];
        };
        RsDataGetPostFilesResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["GetPostFilesResponseBody"];
        };
        GetPostBodyResponseBody: {
            /** Format: date-time */
            modifyDate: string;
            body: string;
        };
        RsDataGetPostBodyResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["GetPostBodyResponseBody"];
        };
        GetMineResponseBody: {
            itemPage: components["schemas"]["PageDtoPostDto"];
        };
        RsDataGetMineResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["GetMineResponseBody"];
        };
        GetByAuthorResponseBody: {
            itemPage: components["schemas"]["PageDtoPostDto"];
        };
        RsDataGetByAuthorResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["GetByAuthorResponseBody"];
        };
        GetPostCommentsResponseBody: {
            items: components["schemas"]["PostCommentDto"][];
        };
        RsDataGetPostCommentsResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["GetPostCommentsResponseBody"];
        };
        GetPostSubCommentsResponseBody: {
            items: components["schemas"]["PostCommentDto"][];
        };
        RsDataGetPostSubCommentsResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["GetPostSubCommentsResponseBody"];
        };
        MeResponseBody: {
            item: components["schemas"]["MemberDto"];
        };
        RsDataMeResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["MeResponseBody"];
        };
        CancelLikeResponseBody: {
            item: components["schemas"]["PostDto"];
        };
        RsDataCancelLikeResponseBody: {
            resultCode: string;
            /** Format: int32 */
            statusCode: number;
            msg: string;
            data: components["schemas"]["CancelLikeResponseBody"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataGetPostResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEditResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    uploadVideo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                fileNo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    deleteVideo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                fileNo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    getPostBody: {
        parameters: {
            query: {
                lastModifyDate: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataGetPostBodyResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    editBody: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditBodyRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    edit_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
                postCommentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditCommentRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEditCommentResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    delete_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
                postCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    migrate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MigrateRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    like: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataLikeResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    makeTemp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataMakeTempResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    makeTemp_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
                postCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataMakeTempReplyCommentResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    makeTemp_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataMakeTempCommentResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataLoginResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    test: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataTestResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    getPosts: {
        parameters: {
            query?: {
                page?: number;
                kw?: string;
                kwType?: "ALL" | "TITLE" | "BODY" | "NAME";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataGetPostsResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    getPostFiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataGetPostFilesResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    getMine: {
        parameters: {
            query?: {
                page?: number;
                kw?: string;
                kwType?: "ALL" | "TITLE" | "BODY" | "NAME";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataGetMineResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    getByAuthor: {
        parameters: {
            query?: {
                page?: number;
                kw?: string;
                kwType?: "ALL" | "TITLE" | "BODY" | "NAME";
            };
            header?: never;
            path: {
                authorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataGetByAuthorResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    getPostComments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataGetPostCommentsResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    getPostSubComments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
                postCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataGetPostSubCommentsResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataMeResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    cancelLike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataCancelLikeResponseBody"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
}
